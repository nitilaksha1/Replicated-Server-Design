/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReplicatedBankService {

  public interface Iface {

    public String multi_deposit(int uID, int amount, TimeStamp timestamp, int serverid) throws org.apache.thrift.TException;

    public int multi_getBalance(int uID, TimeStamp timestamp, int serverid) throws org.apache.thrift.TException;

    public String multi_transfer(int srcuID, int targuID, int amount, TimeStamp timestamp, int serverid) throws org.apache.thrift.TException;

    public void multi_deposit_ack(TimeStamp reqTimeStamp, int serverid) throws org.apache.thrift.TException;

    public void multi_getBalance_ack(TimeStamp reqTimeStamp, int serverid) throws org.apache.thrift.TException;

    public void multi_transfer_ack(String requestID, int serverid, TimeStamp timestamp) throws org.apache.thrift.TException;

    public void multi_transfer_server(int srcuID, int targuID, int amount, TimeStamp timestamp, int serverid, String requestID) throws org.apache.thrift.TException;

    public void halt() throws org.apache.thrift.TException;

    public void stop_execution(TimeStamp timestamp) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void multi_deposit(int uID, int amount, TimeStamp timestamp, int serverid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void multi_getBalance(int uID, TimeStamp timestamp, int serverid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void multi_transfer(int srcuID, int targuID, int amount, TimeStamp timestamp, int serverid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void multi_deposit_ack(TimeStamp reqTimeStamp, int serverid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void multi_getBalance_ack(TimeStamp reqTimeStamp, int serverid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void multi_transfer_ack(String requestID, int serverid, TimeStamp timestamp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void multi_transfer_server(int srcuID, int targuID, int amount, TimeStamp timestamp, int serverid, String requestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void halt(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void stop_execution(TimeStamp timestamp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String multi_deposit(int uID, int amount, TimeStamp timestamp, int serverid) throws org.apache.thrift.TException
    {
      send_multi_deposit(uID, amount, timestamp, serverid);
      return recv_multi_deposit();
    }

    public void send_multi_deposit(int uID, int amount, TimeStamp timestamp, int serverid) throws org.apache.thrift.TException
    {
      multi_deposit_args args = new multi_deposit_args();
      args.setUID(uID);
      args.setAmount(amount);
      args.setTimestamp(timestamp);
      args.setServerid(serverid);
      sendBase("multi_deposit", args);
    }

    public String recv_multi_deposit() throws org.apache.thrift.TException
    {
      multi_deposit_result result = new multi_deposit_result();
      receiveBase(result, "multi_deposit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "multi_deposit failed: unknown result");
    }

    public int multi_getBalance(int uID, TimeStamp timestamp, int serverid) throws org.apache.thrift.TException
    {
      send_multi_getBalance(uID, timestamp, serverid);
      return recv_multi_getBalance();
    }

    public void send_multi_getBalance(int uID, TimeStamp timestamp, int serverid) throws org.apache.thrift.TException
    {
      multi_getBalance_args args = new multi_getBalance_args();
      args.setUID(uID);
      args.setTimestamp(timestamp);
      args.setServerid(serverid);
      sendBase("multi_getBalance", args);
    }

    public int recv_multi_getBalance() throws org.apache.thrift.TException
    {
      multi_getBalance_result result = new multi_getBalance_result();
      receiveBase(result, "multi_getBalance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "multi_getBalance failed: unknown result");
    }

    public String multi_transfer(int srcuID, int targuID, int amount, TimeStamp timestamp, int serverid) throws org.apache.thrift.TException
    {
      send_multi_transfer(srcuID, targuID, amount, timestamp, serverid);
      return recv_multi_transfer();
    }

    public void send_multi_transfer(int srcuID, int targuID, int amount, TimeStamp timestamp, int serverid) throws org.apache.thrift.TException
    {
      multi_transfer_args args = new multi_transfer_args();
      args.setSrcuID(srcuID);
      args.setTarguID(targuID);
      args.setAmount(amount);
      args.setTimestamp(timestamp);
      args.setServerid(serverid);
      sendBase("multi_transfer", args);
    }

    public String recv_multi_transfer() throws org.apache.thrift.TException
    {
      multi_transfer_result result = new multi_transfer_result();
      receiveBase(result, "multi_transfer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "multi_transfer failed: unknown result");
    }

    public void multi_deposit_ack(TimeStamp reqTimeStamp, int serverid) throws org.apache.thrift.TException
    {
      send_multi_deposit_ack(reqTimeStamp, serverid);
      recv_multi_deposit_ack();
    }

    public void send_multi_deposit_ack(TimeStamp reqTimeStamp, int serverid) throws org.apache.thrift.TException
    {
      multi_deposit_ack_args args = new multi_deposit_ack_args();
      args.setReqTimeStamp(reqTimeStamp);
      args.setServerid(serverid);
      sendBase("multi_deposit_ack", args);
    }

    public void recv_multi_deposit_ack() throws org.apache.thrift.TException
    {
      multi_deposit_ack_result result = new multi_deposit_ack_result();
      receiveBase(result, "multi_deposit_ack");
      return;
    }

    public void multi_getBalance_ack(TimeStamp reqTimeStamp, int serverid) throws org.apache.thrift.TException
    {
      send_multi_getBalance_ack(reqTimeStamp, serverid);
      recv_multi_getBalance_ack();
    }

    public void send_multi_getBalance_ack(TimeStamp reqTimeStamp, int serverid) throws org.apache.thrift.TException
    {
      multi_getBalance_ack_args args = new multi_getBalance_ack_args();
      args.setReqTimeStamp(reqTimeStamp);
      args.setServerid(serverid);
      sendBase("multi_getBalance_ack", args);
    }

    public void recv_multi_getBalance_ack() throws org.apache.thrift.TException
    {
      multi_getBalance_ack_result result = new multi_getBalance_ack_result();
      receiveBase(result, "multi_getBalance_ack");
      return;
    }

    public void multi_transfer_ack(String requestID, int serverid, TimeStamp timestamp) throws org.apache.thrift.TException
    {
      send_multi_transfer_ack(requestID, serverid, timestamp);
      recv_multi_transfer_ack();
    }

    public void send_multi_transfer_ack(String requestID, int serverid, TimeStamp timestamp) throws org.apache.thrift.TException
    {
      multi_transfer_ack_args args = new multi_transfer_ack_args();
      args.setRequestID(requestID);
      args.setServerid(serverid);
      args.setTimestamp(timestamp);
      sendBase("multi_transfer_ack", args);
    }

    public void recv_multi_transfer_ack() throws org.apache.thrift.TException
    {
      multi_transfer_ack_result result = new multi_transfer_ack_result();
      receiveBase(result, "multi_transfer_ack");
      return;
    }

    public void multi_transfer_server(int srcuID, int targuID, int amount, TimeStamp timestamp, int serverid, String requestID) throws org.apache.thrift.TException
    {
      send_multi_transfer_server(srcuID, targuID, amount, timestamp, serverid, requestID);
    }

    public void send_multi_transfer_server(int srcuID, int targuID, int amount, TimeStamp timestamp, int serverid, String requestID) throws org.apache.thrift.TException
    {
      multi_transfer_server_args args = new multi_transfer_server_args();
      args.setSrcuID(srcuID);
      args.setTarguID(targuID);
      args.setAmount(amount);
      args.setTimestamp(timestamp);
      args.setServerid(serverid);
      args.setRequestID(requestID);
      sendBase("multi_transfer_server", args);
    }

    public void halt() throws org.apache.thrift.TException
    {
      send_halt();
      recv_halt();
    }

    public void send_halt() throws org.apache.thrift.TException
    {
      halt_args args = new halt_args();
      sendBase("halt", args);
    }

    public void recv_halt() throws org.apache.thrift.TException
    {
      halt_result result = new halt_result();
      receiveBase(result, "halt");
      return;
    }

    public void stop_execution(TimeStamp timestamp) throws org.apache.thrift.TException
    {
      send_stop_execution(timestamp);
      recv_stop_execution();
    }

    public void send_stop_execution(TimeStamp timestamp) throws org.apache.thrift.TException
    {
      stop_execution_args args = new stop_execution_args();
      args.setTimestamp(timestamp);
      sendBase("stop_execution", args);
    }

    public void recv_stop_execution() throws org.apache.thrift.TException
    {
      stop_execution_result result = new stop_execution_result();
      receiveBase(result, "stop_execution");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void multi_deposit(int uID, int amount, TimeStamp timestamp, int serverid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      multi_deposit_call method_call = new multi_deposit_call(uID, amount, timestamp, serverid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class multi_deposit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int uID;
      private int amount;
      private TimeStamp timestamp;
      private int serverid;
      public multi_deposit_call(int uID, int amount, TimeStamp timestamp, int serverid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uID = uID;
        this.amount = amount;
        this.timestamp = timestamp;
        this.serverid = serverid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multi_deposit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        multi_deposit_args args = new multi_deposit_args();
        args.setUID(uID);
        args.setAmount(amount);
        args.setTimestamp(timestamp);
        args.setServerid(serverid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_multi_deposit();
      }
    }

    public void multi_getBalance(int uID, TimeStamp timestamp, int serverid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      multi_getBalance_call method_call = new multi_getBalance_call(uID, timestamp, serverid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class multi_getBalance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int uID;
      private TimeStamp timestamp;
      private int serverid;
      public multi_getBalance_call(int uID, TimeStamp timestamp, int serverid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uID = uID;
        this.timestamp = timestamp;
        this.serverid = serverid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multi_getBalance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        multi_getBalance_args args = new multi_getBalance_args();
        args.setUID(uID);
        args.setTimestamp(timestamp);
        args.setServerid(serverid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_multi_getBalance();
      }
    }

    public void multi_transfer(int srcuID, int targuID, int amount, TimeStamp timestamp, int serverid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      multi_transfer_call method_call = new multi_transfer_call(srcuID, targuID, amount, timestamp, serverid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class multi_transfer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int srcuID;
      private int targuID;
      private int amount;
      private TimeStamp timestamp;
      private int serverid;
      public multi_transfer_call(int srcuID, int targuID, int amount, TimeStamp timestamp, int serverid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.srcuID = srcuID;
        this.targuID = targuID;
        this.amount = amount;
        this.timestamp = timestamp;
        this.serverid = serverid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multi_transfer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        multi_transfer_args args = new multi_transfer_args();
        args.setSrcuID(srcuID);
        args.setTarguID(targuID);
        args.setAmount(amount);
        args.setTimestamp(timestamp);
        args.setServerid(serverid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_multi_transfer();
      }
    }

    public void multi_deposit_ack(TimeStamp reqTimeStamp, int serverid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      multi_deposit_ack_call method_call = new multi_deposit_ack_call(reqTimeStamp, serverid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class multi_deposit_ack_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TimeStamp reqTimeStamp;
      private int serverid;
      public multi_deposit_ack_call(TimeStamp reqTimeStamp, int serverid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqTimeStamp = reqTimeStamp;
        this.serverid = serverid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multi_deposit_ack", org.apache.thrift.protocol.TMessageType.CALL, 0));
        multi_deposit_ack_args args = new multi_deposit_ack_args();
        args.setReqTimeStamp(reqTimeStamp);
        args.setServerid(serverid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_multi_deposit_ack();
      }
    }

    public void multi_getBalance_ack(TimeStamp reqTimeStamp, int serverid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      multi_getBalance_ack_call method_call = new multi_getBalance_ack_call(reqTimeStamp, serverid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class multi_getBalance_ack_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TimeStamp reqTimeStamp;
      private int serverid;
      public multi_getBalance_ack_call(TimeStamp reqTimeStamp, int serverid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqTimeStamp = reqTimeStamp;
        this.serverid = serverid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multi_getBalance_ack", org.apache.thrift.protocol.TMessageType.CALL, 0));
        multi_getBalance_ack_args args = new multi_getBalance_ack_args();
        args.setReqTimeStamp(reqTimeStamp);
        args.setServerid(serverid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_multi_getBalance_ack();
      }
    }

    public void multi_transfer_ack(String requestID, int serverid, TimeStamp timestamp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      multi_transfer_ack_call method_call = new multi_transfer_ack_call(requestID, serverid, timestamp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class multi_transfer_ack_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String requestID;
      private int serverid;
      private TimeStamp timestamp;
      public multi_transfer_ack_call(String requestID, int serverid, TimeStamp timestamp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestID = requestID;
        this.serverid = serverid;
        this.timestamp = timestamp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multi_transfer_ack", org.apache.thrift.protocol.TMessageType.CALL, 0));
        multi_transfer_ack_args args = new multi_transfer_ack_args();
        args.setRequestID(requestID);
        args.setServerid(serverid);
        args.setTimestamp(timestamp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_multi_transfer_ack();
      }
    }

    public void multi_transfer_server(int srcuID, int targuID, int amount, TimeStamp timestamp, int serverid, String requestID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      multi_transfer_server_call method_call = new multi_transfer_server_call(srcuID, targuID, amount, timestamp, serverid, requestID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class multi_transfer_server_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int srcuID;
      private int targuID;
      private int amount;
      private TimeStamp timestamp;
      private int serverid;
      private String requestID;
      public multi_transfer_server_call(int srcuID, int targuID, int amount, TimeStamp timestamp, int serverid, String requestID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.srcuID = srcuID;
        this.targuID = targuID;
        this.amount = amount;
        this.timestamp = timestamp;
        this.serverid = serverid;
        this.requestID = requestID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multi_transfer_server", org.apache.thrift.protocol.TMessageType.CALL, 0));
        multi_transfer_server_args args = new multi_transfer_server_args();
        args.setSrcuID(srcuID);
        args.setTarguID(targuID);
        args.setAmount(amount);
        args.setTimestamp(timestamp);
        args.setServerid(serverid);
        args.setRequestID(requestID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void halt(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      halt_call method_call = new halt_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class halt_call extends org.apache.thrift.async.TAsyncMethodCall {
      public halt_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("halt", org.apache.thrift.protocol.TMessageType.CALL, 0));
        halt_args args = new halt_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_halt();
      }
    }

    public void stop_execution(TimeStamp timestamp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stop_execution_call method_call = new stop_execution_call(timestamp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stop_execution_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TimeStamp timestamp;
      public stop_execution_call(TimeStamp timestamp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.timestamp = timestamp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stop_execution", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stop_execution_args args = new stop_execution_args();
        args.setTimestamp(timestamp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_stop_execution();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("multi_deposit", new multi_deposit());
      processMap.put("multi_getBalance", new multi_getBalance());
      processMap.put("multi_transfer", new multi_transfer());
      processMap.put("multi_deposit_ack", new multi_deposit_ack());
      processMap.put("multi_getBalance_ack", new multi_getBalance_ack());
      processMap.put("multi_transfer_ack", new multi_transfer_ack());
      processMap.put("multi_transfer_server", new multi_transfer_server());
      processMap.put("halt", new halt());
      processMap.put("stop_execution", new stop_execution());
      return processMap;
    }

    public static class multi_deposit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, multi_deposit_args> {
      public multi_deposit() {
        super("multi_deposit");
      }

      public multi_deposit_args getEmptyArgsInstance() {
        return new multi_deposit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public multi_deposit_result getResult(I iface, multi_deposit_args args) throws org.apache.thrift.TException {
        multi_deposit_result result = new multi_deposit_result();
        result.success = iface.multi_deposit(args.uID, args.amount, args.timestamp, args.serverid);
        return result;
      }
    }

    public static class multi_getBalance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, multi_getBalance_args> {
      public multi_getBalance() {
        super("multi_getBalance");
      }

      public multi_getBalance_args getEmptyArgsInstance() {
        return new multi_getBalance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public multi_getBalance_result getResult(I iface, multi_getBalance_args args) throws org.apache.thrift.TException {
        multi_getBalance_result result = new multi_getBalance_result();
        result.success = iface.multi_getBalance(args.uID, args.timestamp, args.serverid);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class multi_transfer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, multi_transfer_args> {
      public multi_transfer() {
        super("multi_transfer");
      }

      public multi_transfer_args getEmptyArgsInstance() {
        return new multi_transfer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public multi_transfer_result getResult(I iface, multi_transfer_args args) throws org.apache.thrift.TException {
        multi_transfer_result result = new multi_transfer_result();
        result.success = iface.multi_transfer(args.srcuID, args.targuID, args.amount, args.timestamp, args.serverid);
        return result;
      }
    }

    public static class multi_deposit_ack<I extends Iface> extends org.apache.thrift.ProcessFunction<I, multi_deposit_ack_args> {
      public multi_deposit_ack() {
        super("multi_deposit_ack");
      }

      public multi_deposit_ack_args getEmptyArgsInstance() {
        return new multi_deposit_ack_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public multi_deposit_ack_result getResult(I iface, multi_deposit_ack_args args) throws org.apache.thrift.TException {
        multi_deposit_ack_result result = new multi_deposit_ack_result();
        iface.multi_deposit_ack(args.reqTimeStamp, args.serverid);
        return result;
      }
    }

    public static class multi_getBalance_ack<I extends Iface> extends org.apache.thrift.ProcessFunction<I, multi_getBalance_ack_args> {
      public multi_getBalance_ack() {
        super("multi_getBalance_ack");
      }

      public multi_getBalance_ack_args getEmptyArgsInstance() {
        return new multi_getBalance_ack_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public multi_getBalance_ack_result getResult(I iface, multi_getBalance_ack_args args) throws org.apache.thrift.TException {
        multi_getBalance_ack_result result = new multi_getBalance_ack_result();
        iface.multi_getBalance_ack(args.reqTimeStamp, args.serverid);
        return result;
      }
    }

    public static class multi_transfer_ack<I extends Iface> extends org.apache.thrift.ProcessFunction<I, multi_transfer_ack_args> {
      public multi_transfer_ack() {
        super("multi_transfer_ack");
      }

      public multi_transfer_ack_args getEmptyArgsInstance() {
        return new multi_transfer_ack_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public multi_transfer_ack_result getResult(I iface, multi_transfer_ack_args args) throws org.apache.thrift.TException {
        multi_transfer_ack_result result = new multi_transfer_ack_result();
        iface.multi_transfer_ack(args.requestID, args.serverid, args.timestamp);
        return result;
      }
    }

    public static class multi_transfer_server<I extends Iface> extends org.apache.thrift.ProcessFunction<I, multi_transfer_server_args> {
      public multi_transfer_server() {
        super("multi_transfer_server");
      }

      public multi_transfer_server_args getEmptyArgsInstance() {
        return new multi_transfer_server_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, multi_transfer_server_args args) throws org.apache.thrift.TException {
        iface.multi_transfer_server(args.srcuID, args.targuID, args.amount, args.timestamp, args.serverid, args.requestID);
        return null;
      }
    }

    public static class halt<I extends Iface> extends org.apache.thrift.ProcessFunction<I, halt_args> {
      public halt() {
        super("halt");
      }

      public halt_args getEmptyArgsInstance() {
        return new halt_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public halt_result getResult(I iface, halt_args args) throws org.apache.thrift.TException {
        halt_result result = new halt_result();
        iface.halt();
        return result;
      }
    }

    public static class stop_execution<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stop_execution_args> {
      public stop_execution() {
        super("stop_execution");
      }

      public stop_execution_args getEmptyArgsInstance() {
        return new stop_execution_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public stop_execution_result getResult(I iface, stop_execution_args args) throws org.apache.thrift.TException {
        stop_execution_result result = new stop_execution_result();
        iface.stop_execution(args.timestamp);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("multi_deposit", new multi_deposit());
      processMap.put("multi_getBalance", new multi_getBalance());
      processMap.put("multi_transfer", new multi_transfer());
      processMap.put("multi_deposit_ack", new multi_deposit_ack());
      processMap.put("multi_getBalance_ack", new multi_getBalance_ack());
      processMap.put("multi_transfer_ack", new multi_transfer_ack());
      processMap.put("multi_transfer_server", new multi_transfer_server());
      processMap.put("halt", new halt());
      processMap.put("stop_execution", new stop_execution());
      return processMap;
    }

    public static class multi_deposit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, multi_deposit_args, String> {
      public multi_deposit() {
        super("multi_deposit");
      }

      public multi_deposit_args getEmptyArgsInstance() {
        return new multi_deposit_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            multi_deposit_result result = new multi_deposit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            multi_deposit_result result = new multi_deposit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, multi_deposit_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.multi_deposit(args.uID, args.amount, args.timestamp, args.serverid,resultHandler);
      }
    }

    public static class multi_getBalance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, multi_getBalance_args, Integer> {
      public multi_getBalance() {
        super("multi_getBalance");
      }

      public multi_getBalance_args getEmptyArgsInstance() {
        return new multi_getBalance_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            multi_getBalance_result result = new multi_getBalance_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            multi_getBalance_result result = new multi_getBalance_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, multi_getBalance_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.multi_getBalance(args.uID, args.timestamp, args.serverid,resultHandler);
      }
    }

    public static class multi_transfer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, multi_transfer_args, String> {
      public multi_transfer() {
        super("multi_transfer");
      }

      public multi_transfer_args getEmptyArgsInstance() {
        return new multi_transfer_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            multi_transfer_result result = new multi_transfer_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            multi_transfer_result result = new multi_transfer_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, multi_transfer_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.multi_transfer(args.srcuID, args.targuID, args.amount, args.timestamp, args.serverid,resultHandler);
      }
    }

    public static class multi_deposit_ack<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, multi_deposit_ack_args, Void> {
      public multi_deposit_ack() {
        super("multi_deposit_ack");
      }

      public multi_deposit_ack_args getEmptyArgsInstance() {
        return new multi_deposit_ack_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            multi_deposit_ack_result result = new multi_deposit_ack_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            multi_deposit_ack_result result = new multi_deposit_ack_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, multi_deposit_ack_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.multi_deposit_ack(args.reqTimeStamp, args.serverid,resultHandler);
      }
    }

    public static class multi_getBalance_ack<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, multi_getBalance_ack_args, Void> {
      public multi_getBalance_ack() {
        super("multi_getBalance_ack");
      }

      public multi_getBalance_ack_args getEmptyArgsInstance() {
        return new multi_getBalance_ack_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            multi_getBalance_ack_result result = new multi_getBalance_ack_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            multi_getBalance_ack_result result = new multi_getBalance_ack_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, multi_getBalance_ack_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.multi_getBalance_ack(args.reqTimeStamp, args.serverid,resultHandler);
      }
    }

    public static class multi_transfer_ack<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, multi_transfer_ack_args, Void> {
      public multi_transfer_ack() {
        super("multi_transfer_ack");
      }

      public multi_transfer_ack_args getEmptyArgsInstance() {
        return new multi_transfer_ack_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            multi_transfer_ack_result result = new multi_transfer_ack_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            multi_transfer_ack_result result = new multi_transfer_ack_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, multi_transfer_ack_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.multi_transfer_ack(args.requestID, args.serverid, args.timestamp,resultHandler);
      }
    }

    public static class multi_transfer_server<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, multi_transfer_server_args, Void> {
      public multi_transfer_server() {
        super("multi_transfer_server");
      }

      public multi_transfer_server_args getEmptyArgsInstance() {
        return new multi_transfer_server_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, multi_transfer_server_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.multi_transfer_server(args.srcuID, args.targuID, args.amount, args.timestamp, args.serverid, args.requestID,resultHandler);
      }
    }

    public static class halt<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, halt_args, Void> {
      public halt() {
        super("halt");
      }

      public halt_args getEmptyArgsInstance() {
        return new halt_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            halt_result result = new halt_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            halt_result result = new halt_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, halt_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.halt(resultHandler);
      }
    }

    public static class stop_execution<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, stop_execution_args, Void> {
      public stop_execution() {
        super("stop_execution");
      }

      public stop_execution_args getEmptyArgsInstance() {
        return new stop_execution_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            stop_execution_result result = new stop_execution_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            stop_execution_result result = new stop_execution_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, stop_execution_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.stop_execution(args.timestamp,resultHandler);
      }
    }

  }

  public static class multi_deposit_args implements org.apache.thrift.TBase<multi_deposit_args, multi_deposit_args._Fields>, java.io.Serializable, Cloneable, Comparable<multi_deposit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multi_deposit_args");

    private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uID", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField SERVERID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverid", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multi_deposit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multi_deposit_argsTupleSchemeFactory());
    }

    public int uID; // required
    public int amount; // required
    public TimeStamp timestamp; // required
    public int serverid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      U_ID((short)1, "uID"),
      AMOUNT((short)2, "amount"),
      TIMESTAMP((short)3, "timestamp"),
      SERVERID((short)4, "serverid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // U_ID
            return U_ID;
          case 2: // AMOUNT
            return AMOUNT;
          case 3: // TIMESTAMP
            return TIMESTAMP;
          case 4: // SERVERID
            return SERVERID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __AMOUNT_ISSET_ID = 1;
    private static final int __SERVERID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimeStamp.class)));
      tmpMap.put(_Fields.SERVERID, new org.apache.thrift.meta_data.FieldMetaData("serverid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multi_deposit_args.class, metaDataMap);
    }

    public multi_deposit_args() {
    }

    public multi_deposit_args(
      int uID,
      int amount,
      TimeStamp timestamp,
      int serverid)
    {
      this();
      this.uID = uID;
      setUIDIsSet(true);
      this.amount = amount;
      setAmountIsSet(true);
      this.timestamp = timestamp;
      this.serverid = serverid;
      setServeridIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multi_deposit_args(multi_deposit_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uID = other.uID;
      this.amount = other.amount;
      if (other.isSetTimestamp()) {
        this.timestamp = new TimeStamp(other.timestamp);
      }
      this.serverid = other.serverid;
    }

    public multi_deposit_args deepCopy() {
      return new multi_deposit_args(this);
    }

    @Override
    public void clear() {
      setUIDIsSet(false);
      this.uID = 0;
      setAmountIsSet(false);
      this.amount = 0;
      this.timestamp = null;
      setServeridIsSet(false);
      this.serverid = 0;
    }

    public int getUID() {
      return this.uID;
    }

    public multi_deposit_args setUID(int uID) {
      this.uID = uID;
      setUIDIsSet(true);
      return this;
    }

    public void unsetUID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uID is set (has been assigned a value) and false otherwise */
    public boolean isSetUID() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public int getAmount() {
      return this.amount;
    }

    public multi_deposit_args setAmount(int amount) {
      this.amount = amount;
      setAmountIsSet(true);
      return this;
    }

    public void unsetAmount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    /** Returns true if field amount is set (has been assigned a value) and false otherwise */
    public boolean isSetAmount() {
      return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    public void setAmountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
    }

    public TimeStamp getTimestamp() {
      return this.timestamp;
    }

    public multi_deposit_args setTimestamp(TimeStamp timestamp) {
      this.timestamp = timestamp;
      return this;
    }

    public void unsetTimestamp() {
      this.timestamp = null;
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
      return this.timestamp != null;
    }

    public void setTimestampIsSet(boolean value) {
      if (!value) {
        this.timestamp = null;
      }
    }

    public int getServerid() {
      return this.serverid;
    }

    public multi_deposit_args setServerid(int serverid) {
      this.serverid = serverid;
      setServeridIsSet(true);
      return this;
    }

    public void unsetServerid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    /** Returns true if field serverid is set (has been assigned a value) and false otherwise */
    public boolean isSetServerid() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    public void setServeridIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case U_ID:
        if (value == null) {
          unsetUID();
        } else {
          setUID((Integer)value);
        }
        break;

      case AMOUNT:
        if (value == null) {
          unsetAmount();
        } else {
          setAmount((Integer)value);
        }
        break;

      case TIMESTAMP:
        if (value == null) {
          unsetTimestamp();
        } else {
          setTimestamp((TimeStamp)value);
        }
        break;

      case SERVERID:
        if (value == null) {
          unsetServerid();
        } else {
          setServerid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case U_ID:
        return Integer.valueOf(getUID());

      case AMOUNT:
        return Integer.valueOf(getAmount());

      case TIMESTAMP:
        return getTimestamp();

      case SERVERID:
        return Integer.valueOf(getServerid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case U_ID:
        return isSetUID();
      case AMOUNT:
        return isSetAmount();
      case TIMESTAMP:
        return isSetTimestamp();
      case SERVERID:
        return isSetServerid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multi_deposit_args)
        return this.equals((multi_deposit_args)that);
      return false;
    }

    public boolean equals(multi_deposit_args that) {
      if (that == null)
        return false;

      boolean this_present_uID = true;
      boolean that_present_uID = true;
      if (this_present_uID || that_present_uID) {
        if (!(this_present_uID && that_present_uID))
          return false;
        if (this.uID != that.uID)
          return false;
      }

      boolean this_present_amount = true;
      boolean that_present_amount = true;
      if (this_present_amount || that_present_amount) {
        if (!(this_present_amount && that_present_amount))
          return false;
        if (this.amount != that.amount)
          return false;
      }

      boolean this_present_timestamp = true && this.isSetTimestamp();
      boolean that_present_timestamp = true && that.isSetTimestamp();
      if (this_present_timestamp || that_present_timestamp) {
        if (!(this_present_timestamp && that_present_timestamp))
          return false;
        if (!this.timestamp.equals(that.timestamp))
          return false;
      }

      boolean this_present_serverid = true;
      boolean that_present_serverid = true;
      if (this_present_serverid || that_present_serverid) {
        if (!(this_present_serverid && that_present_serverid))
          return false;
        if (this.serverid != that.serverid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(multi_deposit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUID()).compareTo(other.isSetUID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uID, other.uID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAmount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServerid()).compareTo(other.isSetServerid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverid, other.serverid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multi_deposit_args(");
      boolean first = true;

      sb.append("uID:");
      sb.append(this.uID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("amount:");
      sb.append(this.amount);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      if (this.timestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.timestamp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverid:");
      sb.append(this.serverid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (timestamp != null) {
        timestamp.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multi_deposit_argsStandardSchemeFactory implements SchemeFactory {
      public multi_deposit_argsStandardScheme getScheme() {
        return new multi_deposit_argsStandardScheme();
      }
    }

    private static class multi_deposit_argsStandardScheme extends StandardScheme<multi_deposit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multi_deposit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // U_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.uID = iprot.readI32();
                struct.setUIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AMOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.amount = iprot.readI32();
                struct.setAmountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.timestamp = new TimeStamp();
                struct.timestamp.read(iprot);
                struct.setTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SERVERID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverid = iprot.readI32();
                struct.setServeridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multi_deposit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(U_ID_FIELD_DESC);
        oprot.writeI32(struct.uID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
        oprot.writeI32(struct.amount);
        oprot.writeFieldEnd();
        if (struct.timestamp != null) {
          oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
          struct.timestamp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SERVERID_FIELD_DESC);
        oprot.writeI32(struct.serverid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multi_deposit_argsTupleSchemeFactory implements SchemeFactory {
      public multi_deposit_argsTupleScheme getScheme() {
        return new multi_deposit_argsTupleScheme();
      }
    }

    private static class multi_deposit_argsTupleScheme extends TupleScheme<multi_deposit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multi_deposit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUID()) {
          optionals.set(0);
        }
        if (struct.isSetAmount()) {
          optionals.set(1);
        }
        if (struct.isSetTimestamp()) {
          optionals.set(2);
        }
        if (struct.isSetServerid()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUID()) {
          oprot.writeI32(struct.uID);
        }
        if (struct.isSetAmount()) {
          oprot.writeI32(struct.amount);
        }
        if (struct.isSetTimestamp()) {
          struct.timestamp.write(oprot);
        }
        if (struct.isSetServerid()) {
          oprot.writeI32(struct.serverid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multi_deposit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.uID = iprot.readI32();
          struct.setUIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.amount = iprot.readI32();
          struct.setAmountIsSet(true);
        }
        if (incoming.get(2)) {
          struct.timestamp = new TimeStamp();
          struct.timestamp.read(iprot);
          struct.setTimestampIsSet(true);
        }
        if (incoming.get(3)) {
          struct.serverid = iprot.readI32();
          struct.setServeridIsSet(true);
        }
      }
    }

  }

  public static class multi_deposit_result implements org.apache.thrift.TBase<multi_deposit_result, multi_deposit_result._Fields>, java.io.Serializable, Cloneable, Comparable<multi_deposit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multi_deposit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multi_deposit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multi_deposit_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multi_deposit_result.class, metaDataMap);
    }

    public multi_deposit_result() {
    }

    public multi_deposit_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multi_deposit_result(multi_deposit_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public multi_deposit_result deepCopy() {
      return new multi_deposit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public multi_deposit_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multi_deposit_result)
        return this.equals((multi_deposit_result)that);
      return false;
    }

    public boolean equals(multi_deposit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(multi_deposit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multi_deposit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multi_deposit_resultStandardSchemeFactory implements SchemeFactory {
      public multi_deposit_resultStandardScheme getScheme() {
        return new multi_deposit_resultStandardScheme();
      }
    }

    private static class multi_deposit_resultStandardScheme extends StandardScheme<multi_deposit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multi_deposit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multi_deposit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multi_deposit_resultTupleSchemeFactory implements SchemeFactory {
      public multi_deposit_resultTupleScheme getScheme() {
        return new multi_deposit_resultTupleScheme();
      }
    }

    private static class multi_deposit_resultTupleScheme extends TupleScheme<multi_deposit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multi_deposit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multi_deposit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class multi_getBalance_args implements org.apache.thrift.TBase<multi_getBalance_args, multi_getBalance_args._Fields>, java.io.Serializable, Cloneable, Comparable<multi_getBalance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multi_getBalance_args");

    private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uID", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SERVERID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverid", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multi_getBalance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multi_getBalance_argsTupleSchemeFactory());
    }

    public int uID; // required
    public TimeStamp timestamp; // required
    public int serverid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      U_ID((short)1, "uID"),
      TIMESTAMP((short)2, "timestamp"),
      SERVERID((short)3, "serverid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // U_ID
            return U_ID;
          case 2: // TIMESTAMP
            return TIMESTAMP;
          case 3: // SERVERID
            return SERVERID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __SERVERID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimeStamp.class)));
      tmpMap.put(_Fields.SERVERID, new org.apache.thrift.meta_data.FieldMetaData("serverid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multi_getBalance_args.class, metaDataMap);
    }

    public multi_getBalance_args() {
    }

    public multi_getBalance_args(
      int uID,
      TimeStamp timestamp,
      int serverid)
    {
      this();
      this.uID = uID;
      setUIDIsSet(true);
      this.timestamp = timestamp;
      this.serverid = serverid;
      setServeridIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multi_getBalance_args(multi_getBalance_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uID = other.uID;
      if (other.isSetTimestamp()) {
        this.timestamp = new TimeStamp(other.timestamp);
      }
      this.serverid = other.serverid;
    }

    public multi_getBalance_args deepCopy() {
      return new multi_getBalance_args(this);
    }

    @Override
    public void clear() {
      setUIDIsSet(false);
      this.uID = 0;
      this.timestamp = null;
      setServeridIsSet(false);
      this.serverid = 0;
    }

    public int getUID() {
      return this.uID;
    }

    public multi_getBalance_args setUID(int uID) {
      this.uID = uID;
      setUIDIsSet(true);
      return this;
    }

    public void unsetUID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uID is set (has been assigned a value) and false otherwise */
    public boolean isSetUID() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public TimeStamp getTimestamp() {
      return this.timestamp;
    }

    public multi_getBalance_args setTimestamp(TimeStamp timestamp) {
      this.timestamp = timestamp;
      return this;
    }

    public void unsetTimestamp() {
      this.timestamp = null;
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
      return this.timestamp != null;
    }

    public void setTimestampIsSet(boolean value) {
      if (!value) {
        this.timestamp = null;
      }
    }

    public int getServerid() {
      return this.serverid;
    }

    public multi_getBalance_args setServerid(int serverid) {
      this.serverid = serverid;
      setServeridIsSet(true);
      return this;
    }

    public void unsetServerid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    /** Returns true if field serverid is set (has been assigned a value) and false otherwise */
    public boolean isSetServerid() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    public void setServeridIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case U_ID:
        if (value == null) {
          unsetUID();
        } else {
          setUID((Integer)value);
        }
        break;

      case TIMESTAMP:
        if (value == null) {
          unsetTimestamp();
        } else {
          setTimestamp((TimeStamp)value);
        }
        break;

      case SERVERID:
        if (value == null) {
          unsetServerid();
        } else {
          setServerid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case U_ID:
        return Integer.valueOf(getUID());

      case TIMESTAMP:
        return getTimestamp();

      case SERVERID:
        return Integer.valueOf(getServerid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case U_ID:
        return isSetUID();
      case TIMESTAMP:
        return isSetTimestamp();
      case SERVERID:
        return isSetServerid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multi_getBalance_args)
        return this.equals((multi_getBalance_args)that);
      return false;
    }

    public boolean equals(multi_getBalance_args that) {
      if (that == null)
        return false;

      boolean this_present_uID = true;
      boolean that_present_uID = true;
      if (this_present_uID || that_present_uID) {
        if (!(this_present_uID && that_present_uID))
          return false;
        if (this.uID != that.uID)
          return false;
      }

      boolean this_present_timestamp = true && this.isSetTimestamp();
      boolean that_present_timestamp = true && that.isSetTimestamp();
      if (this_present_timestamp || that_present_timestamp) {
        if (!(this_present_timestamp && that_present_timestamp))
          return false;
        if (!this.timestamp.equals(that.timestamp))
          return false;
      }

      boolean this_present_serverid = true;
      boolean that_present_serverid = true;
      if (this_present_serverid || that_present_serverid) {
        if (!(this_present_serverid && that_present_serverid))
          return false;
        if (this.serverid != that.serverid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(multi_getBalance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUID()).compareTo(other.isSetUID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uID, other.uID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServerid()).compareTo(other.isSetServerid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverid, other.serverid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multi_getBalance_args(");
      boolean first = true;

      sb.append("uID:");
      sb.append(this.uID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      if (this.timestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.timestamp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverid:");
      sb.append(this.serverid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (timestamp != null) {
        timestamp.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multi_getBalance_argsStandardSchemeFactory implements SchemeFactory {
      public multi_getBalance_argsStandardScheme getScheme() {
        return new multi_getBalance_argsStandardScheme();
      }
    }

    private static class multi_getBalance_argsStandardScheme extends StandardScheme<multi_getBalance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multi_getBalance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // U_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.uID = iprot.readI32();
                struct.setUIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.timestamp = new TimeStamp();
                struct.timestamp.read(iprot);
                struct.setTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SERVERID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverid = iprot.readI32();
                struct.setServeridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multi_getBalance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(U_ID_FIELD_DESC);
        oprot.writeI32(struct.uID);
        oprot.writeFieldEnd();
        if (struct.timestamp != null) {
          oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
          struct.timestamp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SERVERID_FIELD_DESC);
        oprot.writeI32(struct.serverid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multi_getBalance_argsTupleSchemeFactory implements SchemeFactory {
      public multi_getBalance_argsTupleScheme getScheme() {
        return new multi_getBalance_argsTupleScheme();
      }
    }

    private static class multi_getBalance_argsTupleScheme extends TupleScheme<multi_getBalance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multi_getBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUID()) {
          optionals.set(0);
        }
        if (struct.isSetTimestamp()) {
          optionals.set(1);
        }
        if (struct.isSetServerid()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUID()) {
          oprot.writeI32(struct.uID);
        }
        if (struct.isSetTimestamp()) {
          struct.timestamp.write(oprot);
        }
        if (struct.isSetServerid()) {
          oprot.writeI32(struct.serverid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multi_getBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.uID = iprot.readI32();
          struct.setUIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timestamp = new TimeStamp();
          struct.timestamp.read(iprot);
          struct.setTimestampIsSet(true);
        }
        if (incoming.get(2)) {
          struct.serverid = iprot.readI32();
          struct.setServeridIsSet(true);
        }
      }
    }

  }

  public static class multi_getBalance_result implements org.apache.thrift.TBase<multi_getBalance_result, multi_getBalance_result._Fields>, java.io.Serializable, Cloneable, Comparable<multi_getBalance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multi_getBalance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multi_getBalance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multi_getBalance_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multi_getBalance_result.class, metaDataMap);
    }

    public multi_getBalance_result() {
    }

    public multi_getBalance_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multi_getBalance_result(multi_getBalance_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public multi_getBalance_result deepCopy() {
      return new multi_getBalance_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public multi_getBalance_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multi_getBalance_result)
        return this.equals((multi_getBalance_result)that);
      return false;
    }

    public boolean equals(multi_getBalance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(multi_getBalance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multi_getBalance_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multi_getBalance_resultStandardSchemeFactory implements SchemeFactory {
      public multi_getBalance_resultStandardScheme getScheme() {
        return new multi_getBalance_resultStandardScheme();
      }
    }

    private static class multi_getBalance_resultStandardScheme extends StandardScheme<multi_getBalance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multi_getBalance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multi_getBalance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multi_getBalance_resultTupleSchemeFactory implements SchemeFactory {
      public multi_getBalance_resultTupleScheme getScheme() {
        return new multi_getBalance_resultTupleScheme();
      }
    }

    private static class multi_getBalance_resultTupleScheme extends TupleScheme<multi_getBalance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multi_getBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multi_getBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class multi_transfer_args implements org.apache.thrift.TBase<multi_transfer_args, multi_transfer_args._Fields>, java.io.Serializable, Cloneable, Comparable<multi_transfer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multi_transfer_args");

    private static final org.apache.thrift.protocol.TField SRCU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("srcuID", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TARGU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("targuID", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField SERVERID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverid", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multi_transfer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multi_transfer_argsTupleSchemeFactory());
    }

    public int srcuID; // required
    public int targuID; // required
    public int amount; // required
    public TimeStamp timestamp; // required
    public int serverid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRCU_ID((short)1, "srcuID"),
      TARGU_ID((short)2, "targuID"),
      AMOUNT((short)3, "amount"),
      TIMESTAMP((short)4, "timestamp"),
      SERVERID((short)5, "serverid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRCU_ID
            return SRCU_ID;
          case 2: // TARGU_ID
            return TARGU_ID;
          case 3: // AMOUNT
            return AMOUNT;
          case 4: // TIMESTAMP
            return TIMESTAMP;
          case 5: // SERVERID
            return SERVERID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SRCUID_ISSET_ID = 0;
    private static final int __TARGUID_ISSET_ID = 1;
    private static final int __AMOUNT_ISSET_ID = 2;
    private static final int __SERVERID_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRCU_ID, new org.apache.thrift.meta_data.FieldMetaData("srcuID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TARGU_ID, new org.apache.thrift.meta_data.FieldMetaData("targuID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimeStamp.class)));
      tmpMap.put(_Fields.SERVERID, new org.apache.thrift.meta_data.FieldMetaData("serverid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multi_transfer_args.class, metaDataMap);
    }

    public multi_transfer_args() {
    }

    public multi_transfer_args(
      int srcuID,
      int targuID,
      int amount,
      TimeStamp timestamp,
      int serverid)
    {
      this();
      this.srcuID = srcuID;
      setSrcuIDIsSet(true);
      this.targuID = targuID;
      setTarguIDIsSet(true);
      this.amount = amount;
      setAmountIsSet(true);
      this.timestamp = timestamp;
      this.serverid = serverid;
      setServeridIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multi_transfer_args(multi_transfer_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.srcuID = other.srcuID;
      this.targuID = other.targuID;
      this.amount = other.amount;
      if (other.isSetTimestamp()) {
        this.timestamp = new TimeStamp(other.timestamp);
      }
      this.serverid = other.serverid;
    }

    public multi_transfer_args deepCopy() {
      return new multi_transfer_args(this);
    }

    @Override
    public void clear() {
      setSrcuIDIsSet(false);
      this.srcuID = 0;
      setTarguIDIsSet(false);
      this.targuID = 0;
      setAmountIsSet(false);
      this.amount = 0;
      this.timestamp = null;
      setServeridIsSet(false);
      this.serverid = 0;
    }

    public int getSrcuID() {
      return this.srcuID;
    }

    public multi_transfer_args setSrcuID(int srcuID) {
      this.srcuID = srcuID;
      setSrcuIDIsSet(true);
      return this;
    }

    public void unsetSrcuID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SRCUID_ISSET_ID);
    }

    /** Returns true if field srcuID is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcuID() {
      return EncodingUtils.testBit(__isset_bitfield, __SRCUID_ISSET_ID);
    }

    public void setSrcuIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SRCUID_ISSET_ID, value);
    }

    public int getTarguID() {
      return this.targuID;
    }

    public multi_transfer_args setTarguID(int targuID) {
      this.targuID = targuID;
      setTarguIDIsSet(true);
      return this;
    }

    public void unsetTarguID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TARGUID_ISSET_ID);
    }

    /** Returns true if field targuID is set (has been assigned a value) and false otherwise */
    public boolean isSetTarguID() {
      return EncodingUtils.testBit(__isset_bitfield, __TARGUID_ISSET_ID);
    }

    public void setTarguIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TARGUID_ISSET_ID, value);
    }

    public int getAmount() {
      return this.amount;
    }

    public multi_transfer_args setAmount(int amount) {
      this.amount = amount;
      setAmountIsSet(true);
      return this;
    }

    public void unsetAmount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    /** Returns true if field amount is set (has been assigned a value) and false otherwise */
    public boolean isSetAmount() {
      return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    public void setAmountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
    }

    public TimeStamp getTimestamp() {
      return this.timestamp;
    }

    public multi_transfer_args setTimestamp(TimeStamp timestamp) {
      this.timestamp = timestamp;
      return this;
    }

    public void unsetTimestamp() {
      this.timestamp = null;
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
      return this.timestamp != null;
    }

    public void setTimestampIsSet(boolean value) {
      if (!value) {
        this.timestamp = null;
      }
    }

    public int getServerid() {
      return this.serverid;
    }

    public multi_transfer_args setServerid(int serverid) {
      this.serverid = serverid;
      setServeridIsSet(true);
      return this;
    }

    public void unsetServerid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    /** Returns true if field serverid is set (has been assigned a value) and false otherwise */
    public boolean isSetServerid() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    public void setServeridIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SRCU_ID:
        if (value == null) {
          unsetSrcuID();
        } else {
          setSrcuID((Integer)value);
        }
        break;

      case TARGU_ID:
        if (value == null) {
          unsetTarguID();
        } else {
          setTarguID((Integer)value);
        }
        break;

      case AMOUNT:
        if (value == null) {
          unsetAmount();
        } else {
          setAmount((Integer)value);
        }
        break;

      case TIMESTAMP:
        if (value == null) {
          unsetTimestamp();
        } else {
          setTimestamp((TimeStamp)value);
        }
        break;

      case SERVERID:
        if (value == null) {
          unsetServerid();
        } else {
          setServerid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SRCU_ID:
        return Integer.valueOf(getSrcuID());

      case TARGU_ID:
        return Integer.valueOf(getTarguID());

      case AMOUNT:
        return Integer.valueOf(getAmount());

      case TIMESTAMP:
        return getTimestamp();

      case SERVERID:
        return Integer.valueOf(getServerid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SRCU_ID:
        return isSetSrcuID();
      case TARGU_ID:
        return isSetTarguID();
      case AMOUNT:
        return isSetAmount();
      case TIMESTAMP:
        return isSetTimestamp();
      case SERVERID:
        return isSetServerid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multi_transfer_args)
        return this.equals((multi_transfer_args)that);
      return false;
    }

    public boolean equals(multi_transfer_args that) {
      if (that == null)
        return false;

      boolean this_present_srcuID = true;
      boolean that_present_srcuID = true;
      if (this_present_srcuID || that_present_srcuID) {
        if (!(this_present_srcuID && that_present_srcuID))
          return false;
        if (this.srcuID != that.srcuID)
          return false;
      }

      boolean this_present_targuID = true;
      boolean that_present_targuID = true;
      if (this_present_targuID || that_present_targuID) {
        if (!(this_present_targuID && that_present_targuID))
          return false;
        if (this.targuID != that.targuID)
          return false;
      }

      boolean this_present_amount = true;
      boolean that_present_amount = true;
      if (this_present_amount || that_present_amount) {
        if (!(this_present_amount && that_present_amount))
          return false;
        if (this.amount != that.amount)
          return false;
      }

      boolean this_present_timestamp = true && this.isSetTimestamp();
      boolean that_present_timestamp = true && that.isSetTimestamp();
      if (this_present_timestamp || that_present_timestamp) {
        if (!(this_present_timestamp && that_present_timestamp))
          return false;
        if (!this.timestamp.equals(that.timestamp))
          return false;
      }

      boolean this_present_serverid = true;
      boolean that_present_serverid = true;
      if (this_present_serverid || that_present_serverid) {
        if (!(this_present_serverid && that_present_serverid))
          return false;
        if (this.serverid != that.serverid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(multi_transfer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSrcuID()).compareTo(other.isSetSrcuID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcuID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcuID, other.srcuID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTarguID()).compareTo(other.isSetTarguID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTarguID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targuID, other.targuID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAmount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServerid()).compareTo(other.isSetServerid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverid, other.serverid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multi_transfer_args(");
      boolean first = true;

      sb.append("srcuID:");
      sb.append(this.srcuID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("targuID:");
      sb.append(this.targuID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("amount:");
      sb.append(this.amount);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      if (this.timestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.timestamp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverid:");
      sb.append(this.serverid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (timestamp != null) {
        timestamp.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multi_transfer_argsStandardSchemeFactory implements SchemeFactory {
      public multi_transfer_argsStandardScheme getScheme() {
        return new multi_transfer_argsStandardScheme();
      }
    }

    private static class multi_transfer_argsStandardScheme extends StandardScheme<multi_transfer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multi_transfer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRCU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.srcuID = iprot.readI32();
                struct.setSrcuIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TARGU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.targuID = iprot.readI32();
                struct.setTarguIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AMOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.amount = iprot.readI32();
                struct.setAmountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.timestamp = new TimeStamp();
                struct.timestamp.read(iprot);
                struct.setTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SERVERID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverid = iprot.readI32();
                struct.setServeridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multi_transfer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SRCU_ID_FIELD_DESC);
        oprot.writeI32(struct.srcuID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TARGU_ID_FIELD_DESC);
        oprot.writeI32(struct.targuID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
        oprot.writeI32(struct.amount);
        oprot.writeFieldEnd();
        if (struct.timestamp != null) {
          oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
          struct.timestamp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SERVERID_FIELD_DESC);
        oprot.writeI32(struct.serverid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multi_transfer_argsTupleSchemeFactory implements SchemeFactory {
      public multi_transfer_argsTupleScheme getScheme() {
        return new multi_transfer_argsTupleScheme();
      }
    }

    private static class multi_transfer_argsTupleScheme extends TupleScheme<multi_transfer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multi_transfer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSrcuID()) {
          optionals.set(0);
        }
        if (struct.isSetTarguID()) {
          optionals.set(1);
        }
        if (struct.isSetAmount()) {
          optionals.set(2);
        }
        if (struct.isSetTimestamp()) {
          optionals.set(3);
        }
        if (struct.isSetServerid()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSrcuID()) {
          oprot.writeI32(struct.srcuID);
        }
        if (struct.isSetTarguID()) {
          oprot.writeI32(struct.targuID);
        }
        if (struct.isSetAmount()) {
          oprot.writeI32(struct.amount);
        }
        if (struct.isSetTimestamp()) {
          struct.timestamp.write(oprot);
        }
        if (struct.isSetServerid()) {
          oprot.writeI32(struct.serverid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multi_transfer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.srcuID = iprot.readI32();
          struct.setSrcuIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.targuID = iprot.readI32();
          struct.setTarguIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.amount = iprot.readI32();
          struct.setAmountIsSet(true);
        }
        if (incoming.get(3)) {
          struct.timestamp = new TimeStamp();
          struct.timestamp.read(iprot);
          struct.setTimestampIsSet(true);
        }
        if (incoming.get(4)) {
          struct.serverid = iprot.readI32();
          struct.setServeridIsSet(true);
        }
      }
    }

  }

  public static class multi_transfer_result implements org.apache.thrift.TBase<multi_transfer_result, multi_transfer_result._Fields>, java.io.Serializable, Cloneable, Comparable<multi_transfer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multi_transfer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multi_transfer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multi_transfer_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multi_transfer_result.class, metaDataMap);
    }

    public multi_transfer_result() {
    }

    public multi_transfer_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multi_transfer_result(multi_transfer_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public multi_transfer_result deepCopy() {
      return new multi_transfer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public multi_transfer_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multi_transfer_result)
        return this.equals((multi_transfer_result)that);
      return false;
    }

    public boolean equals(multi_transfer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(multi_transfer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multi_transfer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multi_transfer_resultStandardSchemeFactory implements SchemeFactory {
      public multi_transfer_resultStandardScheme getScheme() {
        return new multi_transfer_resultStandardScheme();
      }
    }

    private static class multi_transfer_resultStandardScheme extends StandardScheme<multi_transfer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multi_transfer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multi_transfer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multi_transfer_resultTupleSchemeFactory implements SchemeFactory {
      public multi_transfer_resultTupleScheme getScheme() {
        return new multi_transfer_resultTupleScheme();
      }
    }

    private static class multi_transfer_resultTupleScheme extends TupleScheme<multi_transfer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multi_transfer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multi_transfer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class multi_deposit_ack_args implements org.apache.thrift.TBase<multi_deposit_ack_args, multi_deposit_ack_args._Fields>, java.io.Serializable, Cloneable, Comparable<multi_deposit_ack_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multi_deposit_ack_args");

    private static final org.apache.thrift.protocol.TField REQ_TIME_STAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("reqTimeStamp", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SERVERID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverid", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multi_deposit_ack_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multi_deposit_ack_argsTupleSchemeFactory());
    }

    public TimeStamp reqTimeStamp; // required
    public int serverid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_TIME_STAMP((short)1, "reqTimeStamp"),
      SERVERID((short)2, "serverid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_TIME_STAMP
            return REQ_TIME_STAMP;
          case 2: // SERVERID
            return SERVERID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_TIME_STAMP, new org.apache.thrift.meta_data.FieldMetaData("reqTimeStamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimeStamp.class)));
      tmpMap.put(_Fields.SERVERID, new org.apache.thrift.meta_data.FieldMetaData("serverid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multi_deposit_ack_args.class, metaDataMap);
    }

    public multi_deposit_ack_args() {
    }

    public multi_deposit_ack_args(
      TimeStamp reqTimeStamp,
      int serverid)
    {
      this();
      this.reqTimeStamp = reqTimeStamp;
      this.serverid = serverid;
      setServeridIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multi_deposit_ack_args(multi_deposit_ack_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetReqTimeStamp()) {
        this.reqTimeStamp = new TimeStamp(other.reqTimeStamp);
      }
      this.serverid = other.serverid;
    }

    public multi_deposit_ack_args deepCopy() {
      return new multi_deposit_ack_args(this);
    }

    @Override
    public void clear() {
      this.reqTimeStamp = null;
      setServeridIsSet(false);
      this.serverid = 0;
    }

    public TimeStamp getReqTimeStamp() {
      return this.reqTimeStamp;
    }

    public multi_deposit_ack_args setReqTimeStamp(TimeStamp reqTimeStamp) {
      this.reqTimeStamp = reqTimeStamp;
      return this;
    }

    public void unsetReqTimeStamp() {
      this.reqTimeStamp = null;
    }

    /** Returns true if field reqTimeStamp is set (has been assigned a value) and false otherwise */
    public boolean isSetReqTimeStamp() {
      return this.reqTimeStamp != null;
    }

    public void setReqTimeStampIsSet(boolean value) {
      if (!value) {
        this.reqTimeStamp = null;
      }
    }

    public int getServerid() {
      return this.serverid;
    }

    public multi_deposit_ack_args setServerid(int serverid) {
      this.serverid = serverid;
      setServeridIsSet(true);
      return this;
    }

    public void unsetServerid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    /** Returns true if field serverid is set (has been assigned a value) and false otherwise */
    public boolean isSetServerid() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    public void setServeridIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_TIME_STAMP:
        if (value == null) {
          unsetReqTimeStamp();
        } else {
          setReqTimeStamp((TimeStamp)value);
        }
        break;

      case SERVERID:
        if (value == null) {
          unsetServerid();
        } else {
          setServerid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_TIME_STAMP:
        return getReqTimeStamp();

      case SERVERID:
        return Integer.valueOf(getServerid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_TIME_STAMP:
        return isSetReqTimeStamp();
      case SERVERID:
        return isSetServerid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multi_deposit_ack_args)
        return this.equals((multi_deposit_ack_args)that);
      return false;
    }

    public boolean equals(multi_deposit_ack_args that) {
      if (that == null)
        return false;

      boolean this_present_reqTimeStamp = true && this.isSetReqTimeStamp();
      boolean that_present_reqTimeStamp = true && that.isSetReqTimeStamp();
      if (this_present_reqTimeStamp || that_present_reqTimeStamp) {
        if (!(this_present_reqTimeStamp && that_present_reqTimeStamp))
          return false;
        if (!this.reqTimeStamp.equals(that.reqTimeStamp))
          return false;
      }

      boolean this_present_serverid = true;
      boolean that_present_serverid = true;
      if (this_present_serverid || that_present_serverid) {
        if (!(this_present_serverid && that_present_serverid))
          return false;
        if (this.serverid != that.serverid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(multi_deposit_ack_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReqTimeStamp()).compareTo(other.isSetReqTimeStamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqTimeStamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqTimeStamp, other.reqTimeStamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServerid()).compareTo(other.isSetServerid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverid, other.serverid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multi_deposit_ack_args(");
      boolean first = true;

      sb.append("reqTimeStamp:");
      if (this.reqTimeStamp == null) {
        sb.append("null");
      } else {
        sb.append(this.reqTimeStamp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverid:");
      sb.append(this.serverid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (reqTimeStamp != null) {
        reqTimeStamp.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multi_deposit_ack_argsStandardSchemeFactory implements SchemeFactory {
      public multi_deposit_ack_argsStandardScheme getScheme() {
        return new multi_deposit_ack_argsStandardScheme();
      }
    }

    private static class multi_deposit_ack_argsStandardScheme extends StandardScheme<multi_deposit_ack_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multi_deposit_ack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_TIME_STAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reqTimeStamp = new TimeStamp();
                struct.reqTimeStamp.read(iprot);
                struct.setReqTimeStampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERVERID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverid = iprot.readI32();
                struct.setServeridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multi_deposit_ack_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqTimeStamp != null) {
          oprot.writeFieldBegin(REQ_TIME_STAMP_FIELD_DESC);
          struct.reqTimeStamp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SERVERID_FIELD_DESC);
        oprot.writeI32(struct.serverid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multi_deposit_ack_argsTupleSchemeFactory implements SchemeFactory {
      public multi_deposit_ack_argsTupleScheme getScheme() {
        return new multi_deposit_ack_argsTupleScheme();
      }
    }

    private static class multi_deposit_ack_argsTupleScheme extends TupleScheme<multi_deposit_ack_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multi_deposit_ack_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqTimeStamp()) {
          optionals.set(0);
        }
        if (struct.isSetServerid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetReqTimeStamp()) {
          struct.reqTimeStamp.write(oprot);
        }
        if (struct.isSetServerid()) {
          oprot.writeI32(struct.serverid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multi_deposit_ack_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.reqTimeStamp = new TimeStamp();
          struct.reqTimeStamp.read(iprot);
          struct.setReqTimeStampIsSet(true);
        }
        if (incoming.get(1)) {
          struct.serverid = iprot.readI32();
          struct.setServeridIsSet(true);
        }
      }
    }

  }

  public static class multi_deposit_ack_result implements org.apache.thrift.TBase<multi_deposit_ack_result, multi_deposit_ack_result._Fields>, java.io.Serializable, Cloneable, Comparable<multi_deposit_ack_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multi_deposit_ack_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multi_deposit_ack_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multi_deposit_ack_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multi_deposit_ack_result.class, metaDataMap);
    }

    public multi_deposit_ack_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multi_deposit_ack_result(multi_deposit_ack_result other) {
    }

    public multi_deposit_ack_result deepCopy() {
      return new multi_deposit_ack_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multi_deposit_ack_result)
        return this.equals((multi_deposit_ack_result)that);
      return false;
    }

    public boolean equals(multi_deposit_ack_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(multi_deposit_ack_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multi_deposit_ack_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multi_deposit_ack_resultStandardSchemeFactory implements SchemeFactory {
      public multi_deposit_ack_resultStandardScheme getScheme() {
        return new multi_deposit_ack_resultStandardScheme();
      }
    }

    private static class multi_deposit_ack_resultStandardScheme extends StandardScheme<multi_deposit_ack_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multi_deposit_ack_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multi_deposit_ack_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multi_deposit_ack_resultTupleSchemeFactory implements SchemeFactory {
      public multi_deposit_ack_resultTupleScheme getScheme() {
        return new multi_deposit_ack_resultTupleScheme();
      }
    }

    private static class multi_deposit_ack_resultTupleScheme extends TupleScheme<multi_deposit_ack_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multi_deposit_ack_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multi_deposit_ack_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class multi_getBalance_ack_args implements org.apache.thrift.TBase<multi_getBalance_ack_args, multi_getBalance_ack_args._Fields>, java.io.Serializable, Cloneable, Comparable<multi_getBalance_ack_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multi_getBalance_ack_args");

    private static final org.apache.thrift.protocol.TField REQ_TIME_STAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("reqTimeStamp", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SERVERID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverid", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multi_getBalance_ack_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multi_getBalance_ack_argsTupleSchemeFactory());
    }

    public TimeStamp reqTimeStamp; // required
    public int serverid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_TIME_STAMP((short)1, "reqTimeStamp"),
      SERVERID((short)2, "serverid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_TIME_STAMP
            return REQ_TIME_STAMP;
          case 2: // SERVERID
            return SERVERID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_TIME_STAMP, new org.apache.thrift.meta_data.FieldMetaData("reqTimeStamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimeStamp.class)));
      tmpMap.put(_Fields.SERVERID, new org.apache.thrift.meta_data.FieldMetaData("serverid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multi_getBalance_ack_args.class, metaDataMap);
    }

    public multi_getBalance_ack_args() {
    }

    public multi_getBalance_ack_args(
      TimeStamp reqTimeStamp,
      int serverid)
    {
      this();
      this.reqTimeStamp = reqTimeStamp;
      this.serverid = serverid;
      setServeridIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multi_getBalance_ack_args(multi_getBalance_ack_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetReqTimeStamp()) {
        this.reqTimeStamp = new TimeStamp(other.reqTimeStamp);
      }
      this.serverid = other.serverid;
    }

    public multi_getBalance_ack_args deepCopy() {
      return new multi_getBalance_ack_args(this);
    }

    @Override
    public void clear() {
      this.reqTimeStamp = null;
      setServeridIsSet(false);
      this.serverid = 0;
    }

    public TimeStamp getReqTimeStamp() {
      return this.reqTimeStamp;
    }

    public multi_getBalance_ack_args setReqTimeStamp(TimeStamp reqTimeStamp) {
      this.reqTimeStamp = reqTimeStamp;
      return this;
    }

    public void unsetReqTimeStamp() {
      this.reqTimeStamp = null;
    }

    /** Returns true if field reqTimeStamp is set (has been assigned a value) and false otherwise */
    public boolean isSetReqTimeStamp() {
      return this.reqTimeStamp != null;
    }

    public void setReqTimeStampIsSet(boolean value) {
      if (!value) {
        this.reqTimeStamp = null;
      }
    }

    public int getServerid() {
      return this.serverid;
    }

    public multi_getBalance_ack_args setServerid(int serverid) {
      this.serverid = serverid;
      setServeridIsSet(true);
      return this;
    }

    public void unsetServerid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    /** Returns true if field serverid is set (has been assigned a value) and false otherwise */
    public boolean isSetServerid() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    public void setServeridIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_TIME_STAMP:
        if (value == null) {
          unsetReqTimeStamp();
        } else {
          setReqTimeStamp((TimeStamp)value);
        }
        break;

      case SERVERID:
        if (value == null) {
          unsetServerid();
        } else {
          setServerid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_TIME_STAMP:
        return getReqTimeStamp();

      case SERVERID:
        return Integer.valueOf(getServerid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_TIME_STAMP:
        return isSetReqTimeStamp();
      case SERVERID:
        return isSetServerid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multi_getBalance_ack_args)
        return this.equals((multi_getBalance_ack_args)that);
      return false;
    }

    public boolean equals(multi_getBalance_ack_args that) {
      if (that == null)
        return false;

      boolean this_present_reqTimeStamp = true && this.isSetReqTimeStamp();
      boolean that_present_reqTimeStamp = true && that.isSetReqTimeStamp();
      if (this_present_reqTimeStamp || that_present_reqTimeStamp) {
        if (!(this_present_reqTimeStamp && that_present_reqTimeStamp))
          return false;
        if (!this.reqTimeStamp.equals(that.reqTimeStamp))
          return false;
      }

      boolean this_present_serverid = true;
      boolean that_present_serverid = true;
      if (this_present_serverid || that_present_serverid) {
        if (!(this_present_serverid && that_present_serverid))
          return false;
        if (this.serverid != that.serverid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(multi_getBalance_ack_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReqTimeStamp()).compareTo(other.isSetReqTimeStamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqTimeStamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqTimeStamp, other.reqTimeStamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServerid()).compareTo(other.isSetServerid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverid, other.serverid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multi_getBalance_ack_args(");
      boolean first = true;

      sb.append("reqTimeStamp:");
      if (this.reqTimeStamp == null) {
        sb.append("null");
      } else {
        sb.append(this.reqTimeStamp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverid:");
      sb.append(this.serverid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (reqTimeStamp != null) {
        reqTimeStamp.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multi_getBalance_ack_argsStandardSchemeFactory implements SchemeFactory {
      public multi_getBalance_ack_argsStandardScheme getScheme() {
        return new multi_getBalance_ack_argsStandardScheme();
      }
    }

    private static class multi_getBalance_ack_argsStandardScheme extends StandardScheme<multi_getBalance_ack_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multi_getBalance_ack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_TIME_STAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reqTimeStamp = new TimeStamp();
                struct.reqTimeStamp.read(iprot);
                struct.setReqTimeStampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERVERID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverid = iprot.readI32();
                struct.setServeridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multi_getBalance_ack_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqTimeStamp != null) {
          oprot.writeFieldBegin(REQ_TIME_STAMP_FIELD_DESC);
          struct.reqTimeStamp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SERVERID_FIELD_DESC);
        oprot.writeI32(struct.serverid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multi_getBalance_ack_argsTupleSchemeFactory implements SchemeFactory {
      public multi_getBalance_ack_argsTupleScheme getScheme() {
        return new multi_getBalance_ack_argsTupleScheme();
      }
    }

    private static class multi_getBalance_ack_argsTupleScheme extends TupleScheme<multi_getBalance_ack_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multi_getBalance_ack_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqTimeStamp()) {
          optionals.set(0);
        }
        if (struct.isSetServerid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetReqTimeStamp()) {
          struct.reqTimeStamp.write(oprot);
        }
        if (struct.isSetServerid()) {
          oprot.writeI32(struct.serverid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multi_getBalance_ack_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.reqTimeStamp = new TimeStamp();
          struct.reqTimeStamp.read(iprot);
          struct.setReqTimeStampIsSet(true);
        }
        if (incoming.get(1)) {
          struct.serverid = iprot.readI32();
          struct.setServeridIsSet(true);
        }
      }
    }

  }

  public static class multi_getBalance_ack_result implements org.apache.thrift.TBase<multi_getBalance_ack_result, multi_getBalance_ack_result._Fields>, java.io.Serializable, Cloneable, Comparable<multi_getBalance_ack_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multi_getBalance_ack_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multi_getBalance_ack_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multi_getBalance_ack_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multi_getBalance_ack_result.class, metaDataMap);
    }

    public multi_getBalance_ack_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multi_getBalance_ack_result(multi_getBalance_ack_result other) {
    }

    public multi_getBalance_ack_result deepCopy() {
      return new multi_getBalance_ack_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multi_getBalance_ack_result)
        return this.equals((multi_getBalance_ack_result)that);
      return false;
    }

    public boolean equals(multi_getBalance_ack_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(multi_getBalance_ack_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multi_getBalance_ack_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multi_getBalance_ack_resultStandardSchemeFactory implements SchemeFactory {
      public multi_getBalance_ack_resultStandardScheme getScheme() {
        return new multi_getBalance_ack_resultStandardScheme();
      }
    }

    private static class multi_getBalance_ack_resultStandardScheme extends StandardScheme<multi_getBalance_ack_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multi_getBalance_ack_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multi_getBalance_ack_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multi_getBalance_ack_resultTupleSchemeFactory implements SchemeFactory {
      public multi_getBalance_ack_resultTupleScheme getScheme() {
        return new multi_getBalance_ack_resultTupleScheme();
      }
    }

    private static class multi_getBalance_ack_resultTupleScheme extends TupleScheme<multi_getBalance_ack_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multi_getBalance_ack_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multi_getBalance_ack_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class multi_transfer_ack_args implements org.apache.thrift.TBase<multi_transfer_ack_args, multi_transfer_ack_args._Fields>, java.io.Serializable, Cloneable, Comparable<multi_transfer_ack_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multi_transfer_ack_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SERVERID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverid", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multi_transfer_ack_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multi_transfer_ack_argsTupleSchemeFactory());
    }

    public String requestID; // required
    public int serverid; // required
    public TimeStamp timestamp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestID"),
      SERVERID((short)2, "serverid"),
      TIMESTAMP((short)3, "timestamp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // SERVERID
            return SERVERID;
          case 3: // TIMESTAMP
            return TIMESTAMP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERVERID, new org.apache.thrift.meta_data.FieldMetaData("serverid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimeStamp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multi_transfer_ack_args.class, metaDataMap);
    }

    public multi_transfer_ack_args() {
    }

    public multi_transfer_ack_args(
      String requestID,
      int serverid,
      TimeStamp timestamp)
    {
      this();
      this.requestID = requestID;
      this.serverid = serverid;
      setServeridIsSet(true);
      this.timestamp = timestamp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multi_transfer_ack_args(multi_transfer_ack_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetRequestID()) {
        this.requestID = other.requestID;
      }
      this.serverid = other.serverid;
      if (other.isSetTimestamp()) {
        this.timestamp = new TimeStamp(other.timestamp);
      }
    }

    public multi_transfer_ack_args deepCopy() {
      return new multi_transfer_ack_args(this);
    }

    @Override
    public void clear() {
      this.requestID = null;
      setServeridIsSet(false);
      this.serverid = 0;
      this.timestamp = null;
    }

    public String getRequestID() {
      return this.requestID;
    }

    public multi_transfer_ack_args setRequestID(String requestID) {
      this.requestID = requestID;
      return this;
    }

    public void unsetRequestID() {
      this.requestID = null;
    }

    /** Returns true if field requestID is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestID() {
      return this.requestID != null;
    }

    public void setRequestIDIsSet(boolean value) {
      if (!value) {
        this.requestID = null;
      }
    }

    public int getServerid() {
      return this.serverid;
    }

    public multi_transfer_ack_args setServerid(int serverid) {
      this.serverid = serverid;
      setServeridIsSet(true);
      return this;
    }

    public void unsetServerid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    /** Returns true if field serverid is set (has been assigned a value) and false otherwise */
    public boolean isSetServerid() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    public void setServeridIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERID_ISSET_ID, value);
    }

    public TimeStamp getTimestamp() {
      return this.timestamp;
    }

    public multi_transfer_ack_args setTimestamp(TimeStamp timestamp) {
      this.timestamp = timestamp;
      return this;
    }

    public void unsetTimestamp() {
      this.timestamp = null;
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
      return this.timestamp != null;
    }

    public void setTimestampIsSet(boolean value) {
      if (!value) {
        this.timestamp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestID();
        } else {
          setRequestID((String)value);
        }
        break;

      case SERVERID:
        if (value == null) {
          unsetServerid();
        } else {
          setServerid((Integer)value);
        }
        break;

      case TIMESTAMP:
        if (value == null) {
          unsetTimestamp();
        } else {
          setTimestamp((TimeStamp)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return getRequestID();

      case SERVERID:
        return Integer.valueOf(getServerid());

      case TIMESTAMP:
        return getTimestamp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestID();
      case SERVERID:
        return isSetServerid();
      case TIMESTAMP:
        return isSetTimestamp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multi_transfer_ack_args)
        return this.equals((multi_transfer_ack_args)that);
      return false;
    }

    public boolean equals(multi_transfer_ack_args that) {
      if (that == null)
        return false;

      boolean this_present_requestID = true && this.isSetRequestID();
      boolean that_present_requestID = true && that.isSetRequestID();
      if (this_present_requestID || that_present_requestID) {
        if (!(this_present_requestID && that_present_requestID))
          return false;
        if (!this.requestID.equals(that.requestID))
          return false;
      }

      boolean this_present_serverid = true;
      boolean that_present_serverid = true;
      if (this_present_serverid || that_present_serverid) {
        if (!(this_present_serverid && that_present_serverid))
          return false;
        if (this.serverid != that.serverid)
          return false;
      }

      boolean this_present_timestamp = true && this.isSetTimestamp();
      boolean that_present_timestamp = true && that.isSetTimestamp();
      if (this_present_timestamp || that_present_timestamp) {
        if (!(this_present_timestamp && that_present_timestamp))
          return false;
        if (!this.timestamp.equals(that.timestamp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(multi_transfer_ack_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestID()).compareTo(other.isSetRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestID, other.requestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServerid()).compareTo(other.isSetServerid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverid, other.serverid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multi_transfer_ack_args(");
      boolean first = true;

      sb.append("requestID:");
      if (this.requestID == null) {
        sb.append("null");
      } else {
        sb.append(this.requestID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverid:");
      sb.append(this.serverid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      if (this.timestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.timestamp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (timestamp != null) {
        timestamp.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multi_transfer_ack_argsStandardSchemeFactory implements SchemeFactory {
      public multi_transfer_ack_argsStandardScheme getScheme() {
        return new multi_transfer_ack_argsStandardScheme();
      }
    }

    private static class multi_transfer_ack_argsStandardScheme extends StandardScheme<multi_transfer_ack_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multi_transfer_ack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requestID = iprot.readString();
                struct.setRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERVERID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverid = iprot.readI32();
                struct.setServeridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.timestamp = new TimeStamp();
                struct.timestamp.read(iprot);
                struct.setTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multi_transfer_ack_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestID != null) {
          oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
          oprot.writeString(struct.requestID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SERVERID_FIELD_DESC);
        oprot.writeI32(struct.serverid);
        oprot.writeFieldEnd();
        if (struct.timestamp != null) {
          oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
          struct.timestamp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multi_transfer_ack_argsTupleSchemeFactory implements SchemeFactory {
      public multi_transfer_ack_argsTupleScheme getScheme() {
        return new multi_transfer_ack_argsTupleScheme();
      }
    }

    private static class multi_transfer_ack_argsTupleScheme extends TupleScheme<multi_transfer_ack_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multi_transfer_ack_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestID()) {
          optionals.set(0);
        }
        if (struct.isSetServerid()) {
          optionals.set(1);
        }
        if (struct.isSetTimestamp()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRequestID()) {
          oprot.writeString(struct.requestID);
        }
        if (struct.isSetServerid()) {
          oprot.writeI32(struct.serverid);
        }
        if (struct.isSetTimestamp()) {
          struct.timestamp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multi_transfer_ack_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.requestID = iprot.readString();
          struct.setRequestIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.serverid = iprot.readI32();
          struct.setServeridIsSet(true);
        }
        if (incoming.get(2)) {
          struct.timestamp = new TimeStamp();
          struct.timestamp.read(iprot);
          struct.setTimestampIsSet(true);
        }
      }
    }

  }

  public static class multi_transfer_ack_result implements org.apache.thrift.TBase<multi_transfer_ack_result, multi_transfer_ack_result._Fields>, java.io.Serializable, Cloneable, Comparable<multi_transfer_ack_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multi_transfer_ack_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multi_transfer_ack_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multi_transfer_ack_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multi_transfer_ack_result.class, metaDataMap);
    }

    public multi_transfer_ack_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multi_transfer_ack_result(multi_transfer_ack_result other) {
    }

    public multi_transfer_ack_result deepCopy() {
      return new multi_transfer_ack_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multi_transfer_ack_result)
        return this.equals((multi_transfer_ack_result)that);
      return false;
    }

    public boolean equals(multi_transfer_ack_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(multi_transfer_ack_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multi_transfer_ack_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multi_transfer_ack_resultStandardSchemeFactory implements SchemeFactory {
      public multi_transfer_ack_resultStandardScheme getScheme() {
        return new multi_transfer_ack_resultStandardScheme();
      }
    }

    private static class multi_transfer_ack_resultStandardScheme extends StandardScheme<multi_transfer_ack_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multi_transfer_ack_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multi_transfer_ack_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multi_transfer_ack_resultTupleSchemeFactory implements SchemeFactory {
      public multi_transfer_ack_resultTupleScheme getScheme() {
        return new multi_transfer_ack_resultTupleScheme();
      }
    }

    private static class multi_transfer_ack_resultTupleScheme extends TupleScheme<multi_transfer_ack_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multi_transfer_ack_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multi_transfer_ack_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class multi_transfer_server_args implements org.apache.thrift.TBase<multi_transfer_server_args, multi_transfer_server_args._Fields>, java.io.Serializable, Cloneable, Comparable<multi_transfer_server_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multi_transfer_server_args");

    private static final org.apache.thrift.protocol.TField SRCU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("srcuID", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TARGU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("targuID", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField SERVERID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverid", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestID", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new multi_transfer_server_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new multi_transfer_server_argsTupleSchemeFactory());
    }

    public int srcuID; // required
    public int targuID; // required
    public int amount; // required
    public TimeStamp timestamp; // required
    public int serverid; // required
    public String requestID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRCU_ID((short)1, "srcuID"),
      TARGU_ID((short)2, "targuID"),
      AMOUNT((short)3, "amount"),
      TIMESTAMP((short)4, "timestamp"),
      SERVERID((short)5, "serverid"),
      REQUEST_ID((short)6, "requestID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRCU_ID
            return SRCU_ID;
          case 2: // TARGU_ID
            return TARGU_ID;
          case 3: // AMOUNT
            return AMOUNT;
          case 4: // TIMESTAMP
            return TIMESTAMP;
          case 5: // SERVERID
            return SERVERID;
          case 6: // REQUEST_ID
            return REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SRCUID_ISSET_ID = 0;
    private static final int __TARGUID_ISSET_ID = 1;
    private static final int __AMOUNT_ISSET_ID = 2;
    private static final int __SERVERID_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRCU_ID, new org.apache.thrift.meta_data.FieldMetaData("srcuID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TARGU_ID, new org.apache.thrift.meta_data.FieldMetaData("targuID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimeStamp.class)));
      tmpMap.put(_Fields.SERVERID, new org.apache.thrift.meta_data.FieldMetaData("serverid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multi_transfer_server_args.class, metaDataMap);
    }

    public multi_transfer_server_args() {
    }

    public multi_transfer_server_args(
      int srcuID,
      int targuID,
      int amount,
      TimeStamp timestamp,
      int serverid,
      String requestID)
    {
      this();
      this.srcuID = srcuID;
      setSrcuIDIsSet(true);
      this.targuID = targuID;
      setTarguIDIsSet(true);
      this.amount = amount;
      setAmountIsSet(true);
      this.timestamp = timestamp;
      this.serverid = serverid;
      setServeridIsSet(true);
      this.requestID = requestID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multi_transfer_server_args(multi_transfer_server_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.srcuID = other.srcuID;
      this.targuID = other.targuID;
      this.amount = other.amount;
      if (other.isSetTimestamp()) {
        this.timestamp = new TimeStamp(other.timestamp);
      }
      this.serverid = other.serverid;
      if (other.isSetRequestID()) {
        this.requestID = other.requestID;
      }
    }

    public multi_transfer_server_args deepCopy() {
      return new multi_transfer_server_args(this);
    }

    @Override
    public void clear() {
      setSrcuIDIsSet(false);
      this.srcuID = 0;
      setTarguIDIsSet(false);
      this.targuID = 0;
      setAmountIsSet(false);
      this.amount = 0;
      this.timestamp = null;
      setServeridIsSet(false);
      this.serverid = 0;
      this.requestID = null;
    }

    public int getSrcuID() {
      return this.srcuID;
    }

    public multi_transfer_server_args setSrcuID(int srcuID) {
      this.srcuID = srcuID;
      setSrcuIDIsSet(true);
      return this;
    }

    public void unsetSrcuID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SRCUID_ISSET_ID);
    }

    /** Returns true if field srcuID is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcuID() {
      return EncodingUtils.testBit(__isset_bitfield, __SRCUID_ISSET_ID);
    }

    public void setSrcuIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SRCUID_ISSET_ID, value);
    }

    public int getTarguID() {
      return this.targuID;
    }

    public multi_transfer_server_args setTarguID(int targuID) {
      this.targuID = targuID;
      setTarguIDIsSet(true);
      return this;
    }

    public void unsetTarguID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TARGUID_ISSET_ID);
    }

    /** Returns true if field targuID is set (has been assigned a value) and false otherwise */
    public boolean isSetTarguID() {
      return EncodingUtils.testBit(__isset_bitfield, __TARGUID_ISSET_ID);
    }

    public void setTarguIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TARGUID_ISSET_ID, value);
    }

    public int getAmount() {
      return this.amount;
    }

    public multi_transfer_server_args setAmount(int amount) {
      this.amount = amount;
      setAmountIsSet(true);
      return this;
    }

    public void unsetAmount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    /** Returns true if field amount is set (has been assigned a value) and false otherwise */
    public boolean isSetAmount() {
      return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    public void setAmountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
    }

    public TimeStamp getTimestamp() {
      return this.timestamp;
    }

    public multi_transfer_server_args setTimestamp(TimeStamp timestamp) {
      this.timestamp = timestamp;
      return this;
    }

    public void unsetTimestamp() {
      this.timestamp = null;
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
      return this.timestamp != null;
    }

    public void setTimestampIsSet(boolean value) {
      if (!value) {
        this.timestamp = null;
      }
    }

    public int getServerid() {
      return this.serverid;
    }

    public multi_transfer_server_args setServerid(int serverid) {
      this.serverid = serverid;
      setServeridIsSet(true);
      return this;
    }

    public void unsetServerid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    /** Returns true if field serverid is set (has been assigned a value) and false otherwise */
    public boolean isSetServerid() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    public void setServeridIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERID_ISSET_ID, value);
    }

    public String getRequestID() {
      return this.requestID;
    }

    public multi_transfer_server_args setRequestID(String requestID) {
      this.requestID = requestID;
      return this;
    }

    public void unsetRequestID() {
      this.requestID = null;
    }

    /** Returns true if field requestID is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestID() {
      return this.requestID != null;
    }

    public void setRequestIDIsSet(boolean value) {
      if (!value) {
        this.requestID = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SRCU_ID:
        if (value == null) {
          unsetSrcuID();
        } else {
          setSrcuID((Integer)value);
        }
        break;

      case TARGU_ID:
        if (value == null) {
          unsetTarguID();
        } else {
          setTarguID((Integer)value);
        }
        break;

      case AMOUNT:
        if (value == null) {
          unsetAmount();
        } else {
          setAmount((Integer)value);
        }
        break;

      case TIMESTAMP:
        if (value == null) {
          unsetTimestamp();
        } else {
          setTimestamp((TimeStamp)value);
        }
        break;

      case SERVERID:
        if (value == null) {
          unsetServerid();
        } else {
          setServerid((Integer)value);
        }
        break;

      case REQUEST_ID:
        if (value == null) {
          unsetRequestID();
        } else {
          setRequestID((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SRCU_ID:
        return Integer.valueOf(getSrcuID());

      case TARGU_ID:
        return Integer.valueOf(getTarguID());

      case AMOUNT:
        return Integer.valueOf(getAmount());

      case TIMESTAMP:
        return getTimestamp();

      case SERVERID:
        return Integer.valueOf(getServerid());

      case REQUEST_ID:
        return getRequestID();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SRCU_ID:
        return isSetSrcuID();
      case TARGU_ID:
        return isSetTarguID();
      case AMOUNT:
        return isSetAmount();
      case TIMESTAMP:
        return isSetTimestamp();
      case SERVERID:
        return isSetServerid();
      case REQUEST_ID:
        return isSetRequestID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multi_transfer_server_args)
        return this.equals((multi_transfer_server_args)that);
      return false;
    }

    public boolean equals(multi_transfer_server_args that) {
      if (that == null)
        return false;

      boolean this_present_srcuID = true;
      boolean that_present_srcuID = true;
      if (this_present_srcuID || that_present_srcuID) {
        if (!(this_present_srcuID && that_present_srcuID))
          return false;
        if (this.srcuID != that.srcuID)
          return false;
      }

      boolean this_present_targuID = true;
      boolean that_present_targuID = true;
      if (this_present_targuID || that_present_targuID) {
        if (!(this_present_targuID && that_present_targuID))
          return false;
        if (this.targuID != that.targuID)
          return false;
      }

      boolean this_present_amount = true;
      boolean that_present_amount = true;
      if (this_present_amount || that_present_amount) {
        if (!(this_present_amount && that_present_amount))
          return false;
        if (this.amount != that.amount)
          return false;
      }

      boolean this_present_timestamp = true && this.isSetTimestamp();
      boolean that_present_timestamp = true && that.isSetTimestamp();
      if (this_present_timestamp || that_present_timestamp) {
        if (!(this_present_timestamp && that_present_timestamp))
          return false;
        if (!this.timestamp.equals(that.timestamp))
          return false;
      }

      boolean this_present_serverid = true;
      boolean that_present_serverid = true;
      if (this_present_serverid || that_present_serverid) {
        if (!(this_present_serverid && that_present_serverid))
          return false;
        if (this.serverid != that.serverid)
          return false;
      }

      boolean this_present_requestID = true && this.isSetRequestID();
      boolean that_present_requestID = true && that.isSetRequestID();
      if (this_present_requestID || that_present_requestID) {
        if (!(this_present_requestID && that_present_requestID))
          return false;
        if (!this.requestID.equals(that.requestID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(multi_transfer_server_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSrcuID()).compareTo(other.isSetSrcuID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcuID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcuID, other.srcuID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTarguID()).compareTo(other.isSetTarguID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTarguID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targuID, other.targuID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAmount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServerid()).compareTo(other.isSetServerid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverid, other.serverid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequestID()).compareTo(other.isSetRequestID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestID, other.requestID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multi_transfer_server_args(");
      boolean first = true;

      sb.append("srcuID:");
      sb.append(this.srcuID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("targuID:");
      sb.append(this.targuID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("amount:");
      sb.append(this.amount);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      if (this.timestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.timestamp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverid:");
      sb.append(this.serverid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("requestID:");
      if (this.requestID == null) {
        sb.append("null");
      } else {
        sb.append(this.requestID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (timestamp != null) {
        timestamp.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multi_transfer_server_argsStandardSchemeFactory implements SchemeFactory {
      public multi_transfer_server_argsStandardScheme getScheme() {
        return new multi_transfer_server_argsStandardScheme();
      }
    }

    private static class multi_transfer_server_argsStandardScheme extends StandardScheme<multi_transfer_server_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multi_transfer_server_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRCU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.srcuID = iprot.readI32();
                struct.setSrcuIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TARGU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.targuID = iprot.readI32();
                struct.setTarguIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AMOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.amount = iprot.readI32();
                struct.setAmountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.timestamp = new TimeStamp();
                struct.timestamp.read(iprot);
                struct.setTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SERVERID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serverid = iprot.readI32();
                struct.setServeridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requestID = iprot.readString();
                struct.setRequestIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multi_transfer_server_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SRCU_ID_FIELD_DESC);
        oprot.writeI32(struct.srcuID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TARGU_ID_FIELD_DESC);
        oprot.writeI32(struct.targuID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
        oprot.writeI32(struct.amount);
        oprot.writeFieldEnd();
        if (struct.timestamp != null) {
          oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
          struct.timestamp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SERVERID_FIELD_DESC);
        oprot.writeI32(struct.serverid);
        oprot.writeFieldEnd();
        if (struct.requestID != null) {
          oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
          oprot.writeString(struct.requestID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multi_transfer_server_argsTupleSchemeFactory implements SchemeFactory {
      public multi_transfer_server_argsTupleScheme getScheme() {
        return new multi_transfer_server_argsTupleScheme();
      }
    }

    private static class multi_transfer_server_argsTupleScheme extends TupleScheme<multi_transfer_server_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multi_transfer_server_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSrcuID()) {
          optionals.set(0);
        }
        if (struct.isSetTarguID()) {
          optionals.set(1);
        }
        if (struct.isSetAmount()) {
          optionals.set(2);
        }
        if (struct.isSetTimestamp()) {
          optionals.set(3);
        }
        if (struct.isSetServerid()) {
          optionals.set(4);
        }
        if (struct.isSetRequestID()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSrcuID()) {
          oprot.writeI32(struct.srcuID);
        }
        if (struct.isSetTarguID()) {
          oprot.writeI32(struct.targuID);
        }
        if (struct.isSetAmount()) {
          oprot.writeI32(struct.amount);
        }
        if (struct.isSetTimestamp()) {
          struct.timestamp.write(oprot);
        }
        if (struct.isSetServerid()) {
          oprot.writeI32(struct.serverid);
        }
        if (struct.isSetRequestID()) {
          oprot.writeString(struct.requestID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multi_transfer_server_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.srcuID = iprot.readI32();
          struct.setSrcuIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.targuID = iprot.readI32();
          struct.setTarguIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.amount = iprot.readI32();
          struct.setAmountIsSet(true);
        }
        if (incoming.get(3)) {
          struct.timestamp = new TimeStamp();
          struct.timestamp.read(iprot);
          struct.setTimestampIsSet(true);
        }
        if (incoming.get(4)) {
          struct.serverid = iprot.readI32();
          struct.setServeridIsSet(true);
        }
        if (incoming.get(5)) {
          struct.requestID = iprot.readString();
          struct.setRequestIDIsSet(true);
        }
      }
    }

  }

  public static class halt_args implements org.apache.thrift.TBase<halt_args, halt_args._Fields>, java.io.Serializable, Cloneable, Comparable<halt_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("halt_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new halt_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new halt_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(halt_args.class, metaDataMap);
    }

    public halt_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public halt_args(halt_args other) {
    }

    public halt_args deepCopy() {
      return new halt_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof halt_args)
        return this.equals((halt_args)that);
      return false;
    }

    public boolean equals(halt_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(halt_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("halt_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class halt_argsStandardSchemeFactory implements SchemeFactory {
      public halt_argsStandardScheme getScheme() {
        return new halt_argsStandardScheme();
      }
    }

    private static class halt_argsStandardScheme extends StandardScheme<halt_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, halt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, halt_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class halt_argsTupleSchemeFactory implements SchemeFactory {
      public halt_argsTupleScheme getScheme() {
        return new halt_argsTupleScheme();
      }
    }

    private static class halt_argsTupleScheme extends TupleScheme<halt_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, halt_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, halt_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class halt_result implements org.apache.thrift.TBase<halt_result, halt_result._Fields>, java.io.Serializable, Cloneable, Comparable<halt_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("halt_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new halt_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new halt_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(halt_result.class, metaDataMap);
    }

    public halt_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public halt_result(halt_result other) {
    }

    public halt_result deepCopy() {
      return new halt_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof halt_result)
        return this.equals((halt_result)that);
      return false;
    }

    public boolean equals(halt_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(halt_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("halt_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class halt_resultStandardSchemeFactory implements SchemeFactory {
      public halt_resultStandardScheme getScheme() {
        return new halt_resultStandardScheme();
      }
    }

    private static class halt_resultStandardScheme extends StandardScheme<halt_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, halt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, halt_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class halt_resultTupleSchemeFactory implements SchemeFactory {
      public halt_resultTupleScheme getScheme() {
        return new halt_resultTupleScheme();
      }
    }

    private static class halt_resultTupleScheme extends TupleScheme<halt_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, halt_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, halt_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class stop_execution_args implements org.apache.thrift.TBase<stop_execution_args, stop_execution_args._Fields>, java.io.Serializable, Cloneable, Comparable<stop_execution_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stop_execution_args");

    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stop_execution_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stop_execution_argsTupleSchemeFactory());
    }

    public TimeStamp timestamp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TIMESTAMP((short)1, "timestamp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TIMESTAMP
            return TIMESTAMP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimeStamp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stop_execution_args.class, metaDataMap);
    }

    public stop_execution_args() {
    }

    public stop_execution_args(
      TimeStamp timestamp)
    {
      this();
      this.timestamp = timestamp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stop_execution_args(stop_execution_args other) {
      if (other.isSetTimestamp()) {
        this.timestamp = new TimeStamp(other.timestamp);
      }
    }

    public stop_execution_args deepCopy() {
      return new stop_execution_args(this);
    }

    @Override
    public void clear() {
      this.timestamp = null;
    }

    public TimeStamp getTimestamp() {
      return this.timestamp;
    }

    public stop_execution_args setTimestamp(TimeStamp timestamp) {
      this.timestamp = timestamp;
      return this;
    }

    public void unsetTimestamp() {
      this.timestamp = null;
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
      return this.timestamp != null;
    }

    public void setTimestampIsSet(boolean value) {
      if (!value) {
        this.timestamp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TIMESTAMP:
        if (value == null) {
          unsetTimestamp();
        } else {
          setTimestamp((TimeStamp)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TIMESTAMP:
        return getTimestamp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TIMESTAMP:
        return isSetTimestamp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stop_execution_args)
        return this.equals((stop_execution_args)that);
      return false;
    }

    public boolean equals(stop_execution_args that) {
      if (that == null)
        return false;

      boolean this_present_timestamp = true && this.isSetTimestamp();
      boolean that_present_timestamp = true && that.isSetTimestamp();
      if (this_present_timestamp || that_present_timestamp) {
        if (!(this_present_timestamp && that_present_timestamp))
          return false;
        if (!this.timestamp.equals(that.timestamp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(stop_execution_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stop_execution_args(");
      boolean first = true;

      sb.append("timestamp:");
      if (this.timestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.timestamp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (timestamp != null) {
        timestamp.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stop_execution_argsStandardSchemeFactory implements SchemeFactory {
      public stop_execution_argsStandardScheme getScheme() {
        return new stop_execution_argsStandardScheme();
      }
    }

    private static class stop_execution_argsStandardScheme extends StandardScheme<stop_execution_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stop_execution_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.timestamp = new TimeStamp();
                struct.timestamp.read(iprot);
                struct.setTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stop_execution_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.timestamp != null) {
          oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
          struct.timestamp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stop_execution_argsTupleSchemeFactory implements SchemeFactory {
      public stop_execution_argsTupleScheme getScheme() {
        return new stop_execution_argsTupleScheme();
      }
    }

    private static class stop_execution_argsTupleScheme extends TupleScheme<stop_execution_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stop_execution_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTimestamp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTimestamp()) {
          struct.timestamp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stop_execution_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.timestamp = new TimeStamp();
          struct.timestamp.read(iprot);
          struct.setTimestampIsSet(true);
        }
      }
    }

  }

  public static class stop_execution_result implements org.apache.thrift.TBase<stop_execution_result, stop_execution_result._Fields>, java.io.Serializable, Cloneable, Comparable<stop_execution_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stop_execution_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stop_execution_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stop_execution_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stop_execution_result.class, metaDataMap);
    }

    public stop_execution_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stop_execution_result(stop_execution_result other) {
    }

    public stop_execution_result deepCopy() {
      return new stop_execution_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stop_execution_result)
        return this.equals((stop_execution_result)that);
      return false;
    }

    public boolean equals(stop_execution_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(stop_execution_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stop_execution_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stop_execution_resultStandardSchemeFactory implements SchemeFactory {
      public stop_execution_resultStandardScheme getScheme() {
        return new stop_execution_resultStandardScheme();
      }
    }

    private static class stop_execution_resultStandardScheme extends StandardScheme<stop_execution_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stop_execution_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stop_execution_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stop_execution_resultTupleSchemeFactory implements SchemeFactory {
      public stop_execution_resultTupleScheme getScheme() {
        return new stop_execution_resultTupleScheme();
      }
    }

    private static class stop_execution_resultTupleScheme extends TupleScheme<stop_execution_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stop_execution_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stop_execution_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
